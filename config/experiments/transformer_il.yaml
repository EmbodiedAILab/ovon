# @package _global_

defaults:
  - /habitat_baselines: habitat_baselines_rl_config_base
  - /habitat_baselines/eval: cloudrobo_eval_config
  - /habitat_baselines/rl/policy/obs_transforms:
    - resize
    - relabel_teacher_actions
  - objectnav_hm3d
  - override /habitat/task/lab_sensors:
    - clip_objectgoal_sensor
    - step_id_sensor
    - next_actions_sensor
  - _self_

habitat:
  environment:
    iterator_options:
      max_scene_repeat_steps: 50000
      cycle: True
  task:
    type: "ObjectNav-v2"
    success_reward: 2.5
    slack_reward: -1e-3
    lab_sensors:
      clip_objectgoal_sensor:
        cache: data/text_embeddings/siglip_6.pkl
    measurements:
      success:
        success_distance: 0.1
      distance_to_goal:
        type: OVONDistanceToGoal
        distance_to: VIEW_POINTS
  dataset:
    type: "ObjectNav-v1"
    split: train
    data_path: data/datasets/objectnav/hm3d/v2/{split}/{split}.json.gz
  simulator:
    type: "OVONSim-v0"

habitat_baselines:
  torch_gpu_id: 0
  tensorboard_dir: "output/tb/"
  video_dir: "video_dir"
  test_episode_count: -1
  eval_ckpt_path_dir: "data/new_checkpoints"
  num_environments: 10
  checkpoint_folder: "output/checkpoints"
  log_file: output/habitat.log
  trainer_name: "ver_il"
  num_updates: -1
  total_num_steps: 15000000
  log_interval: 1
  num_checkpoints: 50
  # Force PyTorch to be single threaded as
  # this improves performance considerably
  force_torch_single_threaded: True

  eval:
    split: "val"
    traj_dir: "output/traj/content/"

  rl:
    policy:
      name: "OVONTransformerPolicy"
      backbone: "siglip"
      fusion_type: "concat"
      use_vis_query: True
      use_residual: True
      residual_vision: True
      rgb_only: False
      obs_transforms:
        relabel_teacher_actions:
          teacher_label: "next_actions"
      transformer_config:
        model_name: "llama"
        n_layers: 4
        n_heads: 8
        n_hidden: 512
        n_mlp_hidden: 1024
        max_context_length: 100
        shuffle_pos_id_for_update: True
      cycle_round: 1

    ppo:
      # ppo params
      clip_param: 0.2
      ppo_epoch: 1
      num_mini_batch: 2
      value_loss_coef: 0.5
      entropy_coef: 0.01
      lr: 2.5e-4
      eps: 1e-5
      max_grad_norm: 0.2
      num_steps: 100
      use_gae: True
      gamma: 0.99
      tau: 0.95
      use_linear_clip_decay: False
      use_linear_lr_decay: False
      reward_window_size: 50

      use_normalized_advantage: False

      hidden_size: 512

    ddppo:
      sync_frac: 0.6
      # The PyTorch distributed backend to use
      distrib_backend: NCCL
      # Visual encoder backbone
      pretrained_weights: data/ddppo-models/gibson-2plus-resnet50.pth
      # Initialize with pretrained weights
      pretrained: False
      # Initialize just the visual encoder backbone with pretrained weights
      pretrained_encoder: False
      # Whether or not the visual encoder backbone will be trained.
      train_encoder: False
      # Whether or not to reset the critic linear layer
      reset_critic: True
      force_distributed: True
